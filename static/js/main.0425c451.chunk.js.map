{"version":3,"sources":["utils/HighChartBase.js","components/GeoMap.js","hooks/useData.js","assets/poison.svg","components/NYStats.js","App.js","index.js"],"names":["HighchartsStockModule","HighchartsWithMaps","Exporting","OfflineExporting","Accessibility","DataModule","ExportsData","theme","colors","primaryTeal","primaryDarkBlue","primaryBlue","primaryRed","secondaryTeal","secondaryDarkBlue","secondaryBlue","secondaryRed","title","style","color","font","subtitle","legend","itemStyle","itemHoverStyle","setOptions","credits","enabled","Highcharts","options","chart","type","map","nyGeoJson","borderWidth","height","width","backgroundColor","text","colorAxis","min","max","tickInterval","stops","exporting","GeoMap","useQuery","d","Date","setDate","getDate","fetch","toISOString","slice","then","res","json","staleTime","Infinity","cacheTime","isLoading","data","useState","mapOptions","useEffect","mapData","item","push","county","new_positives","series","name","states","hover","dataLabels","format","option","highcharts","constructorType","format_num","num","toString","replace","NYStats","className","total","positiveIncrease","src","Skull","alt","death","deathIncrease","queryClient","QueryClient","App","QueryClientProvider","client","initialIsOpen","position","Container","Jumbotron","Row","Col","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0425c451.chunk.js","sourcesContent":["import colors from \"styles/global.scss\";\nimport HighchartsWithMaps from \"highcharts/highmaps\";\nimport HighchartsStockModule from \"highcharts/modules/stock\";\n\n\n/**\n * Highcharts recommends we always include these modules for every chart\n */\nimport Exporting from \"highcharts/modules/exporting\";\nimport OfflineExporting from \"highcharts/modules/offline-exporting\";\nimport Accessibility from \"highcharts/modules/accessibility\";\nimport DataModule from \"highcharts/modules/data\";\nimport ExportsData from \"highcharts/modules/export-data\";\n\n\nHighchartsStockModule(HighchartsWithMaps);\n\n/**\n * https://www.highcharts.com/docs/export-module/export-module-overview\n *\n * The exporting module allows your users to download the chart as PDF, PNG, JPG\n * or SVG vector images.\n */\nExporting(HighchartsWithMaps);\n\n/**\n * https://www.highcharts.com/docs/export-module/client-side-export\n *\n * this enables the creation of the download image\n */\nOfflineExporting(HighchartsWithMaps);\n\n/**\n * https://www.highcharts.com/docs/accessibility/accessibility-module\n *\n * Including this module will make your charts compatible with assistive\n * technologies used by people with disabilities, and also improve the usability\n * of your charts, helping you reach a broader audience. Including the\n * Accessibility module will also help with SEO by making your charts more\n * visible to web crawlers.\n */\nAccessibility(HighchartsWithMaps);\n\n/**\n * https://www.highcharts.com/docs/working-with-data/data-module\n *\n * The Data module provides options for loading data from external sources, like\n * CSV files, HTML tables or Google Spreadsheets,\n */\nDataModule(HighchartsWithMaps);\n\n// turns on Download CSV/Excel and \"View data table\"\nExportsData(HighchartsWithMaps);\n\n// https://api.highcharts.com/highcharts/plotOptions.series.label\n// SeriesLabel(HighchartsWithMaps);\n\nHighchartsWithMaps.theme = {\n  colors: [\n    colors.primaryTeal,\n    colors.primaryDarkBlue,\n    colors.primaryBlue,\n    colors.primaryRed,\n\n    colors.secondaryTeal,\n    colors.secondaryDarkBlue,\n    colors.secondaryBlue,\n    colors.secondaryRed,\n  ],\n\n  title: {\n    style: {\n      color: \"#000\",\n      font: 'bold 14px \"Circular Std\", Verdana, sans-serif',\n    },\n  },\n  subtitle: {\n    style: {\n      color: \"#666666\",\n      font: 'bold 12px \"Circular Std\", Verdana, sans-serif',\n    },\n  },\n  legend: {\n    itemStyle: {\n      font: '9px \"Circular Std\", Verdana, sans-serif',\n      color: \"black\",\n    },\n    itemHoverStyle: {\n      color: \"gray\",\n    },\n  },\n};\n// Apply the theme\nHighchartsWithMaps.setOptions(HighchartsWithMaps.theme);\n\nHighchartsWithMaps.setOptions({\n  credits: {\n    enabled: false,\n  },\n});\n\n/**\n * @type import('highcharts/highcharts') & import('react').FunctionComponent<import('highcharts').Props>\n */\nconst Highcharts = HighchartsWithMaps;\n\nexport default Highcharts;","import {useEffect, useState} from 'react'\nimport { useCountyData } from \"hooks/useData\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"utils/HighChartBase\";\nimport nyGeoJson from \"./ny.geo.json\";\n\nlet options = {\n    chart: {\n        type: \"map\",\n        map: nyGeoJson,\n        borderWidth: 0,\n        height: 700,\n        width: 700,\n        backgroundColor: 'transparent'\n      },\n\n  title: {\n    text: \"\",\n  },\n  colorAxis: {\n    min: 0,\n    max: 500,\n    tickInterval: 5,\n    stops: [[0, '#F1EEF6'], [0.65, '#900037'], [1, '#500007']],\n},\nexporting: { enabled: false },\n  subtitle: {\n    text:\n      'COVID-19 New Cases in NY',\n  },\n};\n\n\nconst GeoMap = () => {\n  const { isLoading, data } = useCountyData();\n  const [mapOptions, setOptions] = useState(options)\n  useEffect(()=>{\n    let mapData = []\n    if(!isLoading && data){\n        for(let item of data){\n            mapData.push([item.county, +item.new_positives ])\n        }\n    }\n    const series = [{\n        data: mapData,\n        name: \"New Positive Cases\",\n        states: {\n          hover: {\n            color: \"#BADA55\",\n          },\n        },\n        dataLabels: {\n          enabled: true,\n          format: \"{point.name}\",\n        },\n    }]\n    setOptions((option) => {\n       return  {...option, series: series}\n    })\n  }, [isLoading, data, setOptions])\n\n  return (\n    <HighchartsReact\n      highcharts={Highcharts}\n      constructorType=\"mapChart\"\n      options={mapOptions}\n    />\n\n  );\n};\n\nexport default GeoMap;\n","import { useQuery } from 'react-query';\n\nexport function useNYData() {\n    return useQuery(\n      'NYdata',\n      () => {\n        return fetch(`https://api.covidtracking.com/v1/states/ny/current.json`).then(res => res.json());\n      },\n      {\n        staleTime: Infinity,\n        cacheTime: Infinity,\n      }\n    );\n  }\n  \nexport function useCountyData() {\n    return useQuery(\n      'countyData',\n      () => {\n        let d = new Date();\n        d.setDate(d.getDate() - 2)\n        return fetch(`https://health.data.ny.gov/resource/xdss-u53e.json?test_date=${d.toISOString().slice(0, 10)}T00:00:00.000`).then(res => res.json());\n      },\n      {\n        staleTime: Infinity,\n        cacheTime: Infinity,\n      }\n    );\n  }\n  ","export default __webpack_public_path__ + \"static/media/poison.695503e8.svg\";","import { useNYData } from \"hooks/useData\";\nimport  Skull from 'assets/poison.svg';\n\nfunction format_num(num = 0){\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n\n}\n\nconst NYStats = () => {\n    const { isLoading, data } = useNYData();\n    return !isLoading && data && (\n        <div className=\"h-100 d-flex justify-content-center align-items-center w-100\">\n            <div className=\"text-center\">\n                <h2>Total Cases:</h2>\n                <h3>{format_num(data.total)}</h3>\n                <h2 >New Positive Cases:</h2>\n                <h3>{format_num(data.positiveIncrease)}</h3>\n                <h2>Total Death:</h2>\n                <h3> <img src={Skull} alt=\"\" className=\"mw-100 m-1\" style={{width: 25}}/><span>{format_num(data.death)}</span></h3>\n                <h2>New Death:</h2>\n               <h3>  <img src={Skull} alt=\"\" className=\"mw-100 m-1\" style={{width: 25}}/> <span>{format_num(data.deathIncrease)}</span> </h3>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default NYStats;","import GeoMap from 'components/GeoMap'\nimport NYStats from 'components/NYStats'\nimport {Container, Row, Col, Jumbotron} from 'react-bootstrap'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nconst queryClient = new QueryClient()\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n            <ReactQueryDevtools initialIsOpen={false} position=\"bottom-right\" />\n    <Container className=\"vh-100 d-flex justify-content-center align-items-center\">\n      <Jumbotron >\n        <Row>\n          <Col className=\"text-center\">\n          <h1>New York State COVID-19 Stats</h1>\n          </Col>\n        </Row>\n      <Row>\n        <Col>\n          <NYStats/>\n        </Col>\n        <Col >\n          <GeoMap />\n        </Col>\n      </Row>\n      </Jumbotron>\n    </Container>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n\n  ,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}